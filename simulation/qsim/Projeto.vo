// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

// DATE "06/05/2024 11:20:43"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Display_Dezenas (
	a_dez,
	F,
	d_dez,
	b_dez,
	c_dez,
	e_dez,
	f_dez,
	g_dez);
output 	a_dez;
input 	[4:0] F;
output 	d_dez;
output 	b_dez;
output 	c_dez;
output 	e_dez;
output 	f_dez;
output 	g_dez;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \F[0]~input_o ;
wire \a_dez~output_o ;
wire \d_dez~output_o ;
wire \b_dez~output_o ;
wire \c_dez~output_o ;
wire \e_dez~output_o ;
wire \f_dez~output_o ;
wire \g_dez~output_o ;
wire \F[4]~input_o ;
wire \F[2]~input_o ;
wire \F[1]~input_o ;
wire \F[3]~input_o ;
wire \inst4~0_combout ;
wire \inst6|inst1~combout ;
wire \inst17~0_combout ;
wire \inst20~0_combout ;
wire \inst6|inst1~0_combout ;


cycloneive_io_obuf \a_dez~output (
	.i(!\inst4~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\a_dez~output_o ),
	.obar());
// synopsys translate_off
defparam \a_dez~output .bus_hold = "false";
defparam \a_dez~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \d_dez~output (
	.i(!\inst4~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\d_dez~output_o ),
	.obar());
// synopsys translate_off
defparam \d_dez~output .bus_hold = "false";
defparam \d_dez~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \b_dez~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\b_dez~output_o ),
	.obar());
// synopsys translate_off
defparam \b_dez~output .bus_hold = "false";
defparam \b_dez~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \c_dez~output (
	.i(!\inst6|inst1~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\c_dez~output_o ),
	.obar());
// synopsys translate_off
defparam \c_dez~output .bus_hold = "false";
defparam \c_dez~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \e_dez~output (
	.i(!\inst17~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\e_dez~output_o ),
	.obar());
// synopsys translate_off
defparam \e_dez~output .bus_hold = "false";
defparam \e_dez~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \f_dez~output (
	.i(!\inst20~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\f_dez~output_o ),
	.obar());
// synopsys translate_off
defparam \f_dez~output .bus_hold = "false";
defparam \f_dez~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \g_dez~output (
	.i(!\inst6|inst1~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\g_dez~output_o ),
	.obar());
// synopsys translate_off
defparam \g_dez~output .bus_hold = "false";
defparam \g_dez~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \F[4]~input (
	.i(F[4]),
	.ibar(gnd),
	.o(\F[4]~input_o ));
// synopsys translate_off
defparam \F[4]~input .bus_hold = "false";
defparam \F[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \F[2]~input (
	.i(F[2]),
	.ibar(gnd),
	.o(\F[2]~input_o ));
// synopsys translate_off
defparam \F[2]~input .bus_hold = "false";
defparam \F[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \F[1]~input (
	.i(F[1]),
	.ibar(gnd),
	.o(\F[1]~input_o ));
// synopsys translate_off
defparam \F[1]~input .bus_hold = "false";
defparam \F[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \F[3]~input (
	.i(F[3]),
	.ibar(gnd),
	.o(\F[3]~input_o ));
// synopsys translate_off
defparam \F[3]~input .bus_hold = "false";
defparam \F[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst4~0 (
// Equation(s):
// \inst4~0_combout  = (\F[4]~input_o  & ((\F[2]~input_o ) # ((\F[3]~input_o )))) # (!\F[4]~input_o  & (((!\F[2]~input_o  & !\F[1]~input_o )) # (!\F[3]~input_o )))

	.dataa(\F[4]~input_o ),
	.datab(\F[2]~input_o ),
	.datac(\F[1]~input_o ),
	.datad(\F[3]~input_o ),
	.cin(gnd),
	.combout(\inst4~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst4~0 .lut_mask = 16'hABDD;
defparam \inst4~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst6|inst1 (
// Equation(s):
// \inst6|inst1~combout  = ((\F[3]~input_o  & (\F[1]~input_o  & \F[2]~input_o )) # (!\F[3]~input_o  & ((!\F[2]~input_o )))) # (!\F[4]~input_o )

	.dataa(\F[1]~input_o ),
	.datab(\F[3]~input_o ),
	.datac(\F[2]~input_o ),
	.datad(\F[4]~input_o ),
	.cin(gnd),
	.combout(\inst6|inst1~combout ),
	.cout());
// synopsys translate_off
defparam \inst6|inst1 .lut_mask = 16'h83FF;
defparam \inst6|inst1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst17~0 (
// Equation(s):
// \inst17~0_combout  = (\F[4]~input_o  & ((\F[2]~input_o  & ((!\F[3]~input_o ) # (!\F[1]~input_o ))) # (!\F[2]~input_o  & ((\F[3]~input_o ))))) # (!\F[4]~input_o  & (((!\F[2]~input_o  & !\F[1]~input_o )) # (!\F[3]~input_o )))

	.dataa(\F[4]~input_o ),
	.datab(\F[2]~input_o ),
	.datac(\F[1]~input_o ),
	.datad(\F[3]~input_o ),
	.cin(gnd),
	.combout(\inst17~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst17~0 .lut_mask = 16'h2BDD;
defparam \inst17~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst20~0 (
// Equation(s):
// \inst20~0_combout  = (!\F[4]~input_o  & (((!\F[2]~input_o  & !\F[1]~input_o )) # (!\F[3]~input_o )))

	.dataa(\F[2]~input_o ),
	.datab(\F[1]~input_o ),
	.datac(\F[3]~input_o ),
	.datad(\F[4]~input_o ),
	.cin(gnd),
	.combout(\inst20~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst20~0 .lut_mask = 16'h001F;
defparam \inst20~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst6|inst1~0 (
// Equation(s):
// \inst6|inst1~0_combout  = (\F[4]~input_o  & ((\F[3]~input_o ) # (\F[2]~input_o )))

	.dataa(\F[4]~input_o ),
	.datab(\F[3]~input_o ),
	.datac(\F[2]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst6|inst1~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst6|inst1~0 .lut_mask = 16'hA8A8;
defparam \inst6|inst1~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \F[0]~input (
	.i(F[0]),
	.ibar(gnd),
	.o(\F[0]~input_o ));
// synopsys translate_off
defparam \F[0]~input .bus_hold = "false";
defparam \F[0]~input .simulate_z_as = "z";
// synopsys translate_on

assign a_dez = \a_dez~output_o ;

assign d_dez = \d_dez~output_o ;

assign b_dez = \b_dez~output_o ;

assign c_dez = \c_dez~output_o ;

assign e_dez = \e_dez~output_o ;

assign f_dez = \f_dez~output_o ;

assign g_dez = \g_dez~output_o ;

endmodule
